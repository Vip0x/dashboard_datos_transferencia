# -*- coding: utf-8 -*-
"""Ciencia de Datos II actividad 4 - Transferencia.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wsenoRI3Dwy8AT8HWOnLUkOJGAcw448b
"""

#!pip install dash

# Cuaderno Proyecto Cristian Andres Hernandez Sarmiento - Ucompensar
# Ciencia de datos - Programacion Ciencia de Datos II
import pandas as pd
import numpy as np
import requests
import matplotlib.pyplot as plt
from scipy.stats import chi2_contingency
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import GridSearchCV
from sklearn.linear_model import LogisticRegressionCV
from sklearn.metrics import accuracy_score

# ---- Dash -----
from dash import Dash, dcc, html, callback, Output, Input, dash
import plotly.express as px

dataset = pd.DataFrame()
resp = requests.get("https://data.cdc.gov/api/views/9j2v-jamp/rows.json?accessType=DOWNLOAD")
if resp.status_code == 200:
  dataset = resp.json()

# NOTA: la columna meta es la informacion a fondo del dataset proporcionado
# y se obtine desde el bojeto "columns" el nombre de las columnas para
# mejor uso de la columna "data"
information = pd.DataFrame(dataset['meta']['view']['columns'])

# Se convierte los valores data a un Dataframe con los datos y columnas desceadas
datos = pd.DataFrame(dataset['data'])
datos['Cantidad'] = 1
datos.rename(columns=information['name'], inplace= True)

agrupacion_anios = datos.groupby('AGE')['Cantidad'].sum().to_frame().reset_index()
subgrupo_poblacional = datos.groupby('STUB_LABEL')['Cantidad'].sum().to_frame().reset_index()

app = Dash(__name__)

colors = {
    'background': '#111111',
    'text': '#7FDBFF'
}

fig = px.bar(agrupacion_anios, x="AGE", y="Cantidad") #, color="City", barmode="group")

fig.update_layout(
    plot_bgcolor=colors['background'],
    paper_bgcolor=colors['background'],
    font_color=colors['text']
)

app.layout = html.Div(style={'backgroundColor': colors['background']}, children=[
    html.H1(
        children='Dashboard',
        style={
            'textAlign': 'center',
            'color': colors['text']
        }
    ),

    html.Div(children=[
      html.H1("Cristian Hernandez - Actividad Ciencia de Datos II"),
      html.Div("Data con datos X Edades y subpoblaciones de la cantidad de suicidios por"),
      html.Div("cada 100.000 habitantes en Estados Unidos")
    ], style={
        'textAlign': 'center',
        'color': colors['text']
    }),

    dcc.Graph(
        id='agrupacion-anios-2',
        figure=fig
    ),

    html.Div(children='Suicidios X sub-poblaciones', style={
        'textAlign': 'center',
        'color': colors['text']
    }),

    dcc.Dropdown(
      options=subgrupo_poblacional['STUB_LABEL'].unique(),
      value=subgrupo_poblacional.STUB_LABEL.loc[:1].to_list(),
      id='dropdown-selection',
      multi=True
    ),

    dcc.Graph(
        id='agrupacion-subpoblacion'
    )
])

@app.callback(
    Output('agrupacion-subpoblacion', 'figure'),
    [Input('dropdown-selection', 'value')]
)
def update_pie_chart(value):
  if not value:
    return {}

  dff = subgrupo_poblacional[subgrupo_poblacional.STUB_LABEL.isin(value)]
  if len(dff) > 0:
    torta = px.pie(dff, values='Cantidad', names='STUB_LABEL', title='Gr√°fico en Torta')

    torta.update_layout(
        plot_bgcolor=colors['background'],
        paper_bgcolor=colors['background'],
        font_color=colors['text']
    )
    return torta

  return {}

if __name__ == '__main__':
    app.run(debug=True)

